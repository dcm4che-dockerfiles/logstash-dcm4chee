input {
  gelf {
    type => "wildfly"
  }
  udp {
    port => "${SYSLOG_UDP_PORT}"
    type => "audit"
  }
  tcp {
    port => "${SYSLOG_TCP_PORT}"
    codec => "frame"
    type => "audit"
  }
  tcp {
    port => "${SYSLOG_TLS_PORT}"
    codec => "frame"
    type => "audit"
    ssl_enable => true
    ssl_cert => "${SSL_CERT}"
    ssl_extra_chain_certs => "${SSL_EXTRA_CHAIN_CERTS}"
    ssl_key => "${SSL_KEY}"
    ssl_key_passphrase => "${SSL_KEY_PASSWORD}"
    ssl_verify => "${SSL_VERIFY}"
    ssl_certificate_authorities => "${SSL_CERTIFICATE_AUTHORITIES}"
  }
}

filter {
  if [type] == "wildfly" {
    mutate {
      rename => { "[mdc][activemq.broker]" => "activemq_broker" }
    }
  }
  if [type] == "audit" {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>1 %{TIMESTAMP_ISO8601:syslog_timestamp} %{NOTSPACE:syslog_hostname} %{NOTSPACE:syslog_program} %{NOTSPACE:syslog_pid} %{NOTSPACE:syslog_msgid} - (\xEF\xBB\xBF)?%{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }
    hashtree {
      target => "${HASHTREE_TARGET}"
      previous => "${HASHTREE_PREVIOUS}"
      file => "${HASHTREE_FILE}"
      method => "${HASHTREE_METHOD}"
    }
    xml {
      source => "message"
      target => "audit"
      xpath => [
        "/AuditMessage/EventIdentification", "event",
        "/AuditMessage/EventIdentification/EventID", "event-id",
        "/AuditMessage/EventIdentification/EventTypeCode[1]", "event-type-code",
        "/AuditMessage/AuditSourceIdentification[1]", "audit-source",
        "/AuditMessage/ActiveParticipant[@UserIsRequestor='true'][1]", "requestor",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110150'][1]", "application",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110151'][1]", "application-launcher",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110152'][1]", "destination",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110153'][1]", "source",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110154'][1]", "destination-media",
        "/AuditMessage/ActiveParticipant[RoleIDCode/@csd-code='110155'][1]", "source-media",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='2'][1]", "patient",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='110180'][1]", "study",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='113877'][1]", "device",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='TASK'][1]", "task",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='TASKS'][1]", "tasks",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='REST'][1]", "rest",
        "/AuditMessage/ParticipantObjectIdentification[ParticipantObjectIDTypeCode/@csd-code='110181'][1]", "cfind"
      ]
    }
    if [event] {
      xml {
        source => "event"
        target => "Event"
        remove_field => [ "event" ]
      }
    }
    if [event-id] {
      xml {
        source => "event-id"
        target => "EventID"
        remove_field => [ "event-id" ]
      }
    }
    if [event-type-code] {
      xml {
        source => "event-type-code"
        target => "EventTypeCode"
        remove_field => [ "event-type-code" ]
      }
    }
    if [audit-source] {
      xml {
        source => "audit-source"
        target => "AuditSource"
        remove_field => [ "audit-source" ]
      }
    }
    if [requestor] {
      xml {
        source => "requestor"
        target => "Requestor"
        remove_field => [ "requestor" ]
      }
    }
    if [application] {
      xml {
        source => "application"
        target => "Application"
        remove_field => [ "application" ]
      }
    }
    if [application-launcher] {
      xml {
        source => "application-launcher"
        target => "ApplicationLauncher"
        remove_field => [ "application-launcher" ]
      }
    }
    if [destination] {
      xml {
        source => "destination"
        target => "Destination"
        remove_field => [ "destination" ]
      }
    }
    if [source] {
      xml {
        source => "source"
        target => "Source"
        remove_field => [ "source" ]
      }
    }
    if [destination-media] {
      xml {
        source => "destination-media"
        target => "DestinationMedia"
        remove_field => [ "destination-media" ]
      }
    }
    if [source-media] {
      xml {
        source => "source-media"
        target => "SourceMedia"
        remove_field => [ "source-media" ]
      }
    }
    if [patient] {
      xml {
        source => "patient"
        target => "Patient"
        xpath => [
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='HL7v2 Message']/@value", "hl7v2Message",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='HL7v2 Message'][2]/@value", "hl7v2Message2",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-9']/@value", "msh_9",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-9'][2]/@value", "msh2_9",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-10']/@value", "msh_10",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-10'][2]/@value", "msh2_10"
        ]
        remove_field => [ "patient" ]
      }
      if [hl7v2Message] {
        ruby {
          init => "require 'base64'"
          code => "event.set('HL7v2Message', Base64.decode64(event.get('hl7v2Message')[0]).force_encoding('${HL7_CHARSET}').encode('UTF-8'))"
          remove_field => [ "hl7v2Message" ]
        }
      }
      if [hl7v2Message2] {
        ruby {
          init => "require 'base64'"
          code => "event.set('HL7v2Message2', Base64.decode64(event.get('hl7v2Message2')[0]).force_encoding('${HL7_CHARSET}').encode('UTF-8'))"
          remove_field => [ "hl7v2Message2" ]
        }
      }
      if [msh_9] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH_9', Base64.decode64(event.get('msh_9')[0]))"
          remove_field => [ "msh_9" ]
        }
      }
      if [msh2_9] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH2_9', Base64.decode64(event.get('msh2_9')[0]))"
          remove_field => [ "msh2_9" ]
        }
      }
      if [msh_10] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH_10', Base64.decode64(event.get('msh_10')[0]))"
          remove_field => [ "msh_10" ]
        }
      }
      if [msh2_10] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH2_10', Base64.decode64(event.get('msh2_10')[0]))"
          remove_field => [ "msh2_10" ]
        }
      }
    }
    if [study] {
      xml {
        source => "study"
        target => "Study"
        xpath => [
          "/ParticipantObjectIdentification/@ParticipantObjectDataLifeCycle", "ParticipantObjectDataLifeCycle",
          "/ParticipantObjectIdentification/ParticipantObjectDescription[1]/Accession[1]/@Number", "AccessionNumber",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='StudyDate']/@value", "studyDate",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='StudyDescription']/@value", "studyDescription",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='SeriesDescription']/@value", "seriesDescription",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Modality']/@value", "modality",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='HL7v2 Message']/@value", "hl7v2Message",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='HL7v2 Message'][2]/@value", "hl7v2Message2",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-9']/@value", "msh_9",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-9'][2]/@value", "msh2_9",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-10']/@value", "msh_10",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='MSH-10'][2]/@value", "msh2_10"
        ]
        remove_field => [ "study" ]
      }
      if [studyDate] {
        ruby {
          init => "require 'base64'"
          code => "event.set('StudyDate', Base64.decode64(event.get('studyDate')[0]))"
          remove_field => [ "studyDate" ]
        }
      }
      if [studyDescription] {
        ruby {
          init => "require 'base64'"
          code => "event.set('StudyDescription', Base64.decode64(event.get('studyDescription')[0]))"
          remove_field => [ "studyDescription" ]
        }
      }
      if [seriesDescription] {
        ruby {
          init => "require 'base64'"
          code => "event.set('SeriesDescription', Base64.decode64(event.get('seriesDescription')[0]))"
          remove_field => [ "seriesDescription" ]
        }
      }
      if [modality] {
        ruby {
          init => "require 'base64'"
          code => "event.set('Modality', Base64.decode64(event.get('modality')[0]))"
          remove_field => [ "modality" ]
        }
      }
      if [hl7v2Message] {
        ruby {
          init => "require 'base64'"
          code => "event.set('HL7v2Message', Base64.decode64(event.get('hl7v2Message')[0]).force_encoding('${HL7_CHARSET}').encode('UTF-8'))"
          remove_field => [ "hl7v2Message" ]
        }
      }
      if [hl7v2Message2] {
        ruby {
          init => "require 'base64'"
          code => "event.set('HL7v2Message2', Base64.decode64(event.get('hl7v2Message2')[0]).force_encoding('${HL7_CHARSET}').encode('UTF-8'))"
          remove_field => [ "hl7v2Message2" ]
        }
      }
      if [msh_9] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH_9', Base64.decode64(event.get('msh_9')[0]))"
          remove_field => [ "msh_9" ]
        }
      }
      if [msh2_9] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH2_9', Base64.decode64(event.get('msh2_9')[0]))"
          remove_field => [ "msh2_9" ]
        }
      }
      if [msh_10] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH_10', Base64.decode64(event.get('msh_10')[0]))"
          remove_field => [ "msh_10" ]
        }
      }
      if [msh2_10] {
        ruby {
          init => "require 'base64'"
          code => "event.set('MSH2_10', Base64.decode64(event.get('msh2_10')[0]))"
          remove_field => [ "msh2_10" ]
        }
      }
    }
    if [device] {
      xml {
        source => "device"
        target => "Device"
        xpath => [
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Alert Description']/@value", "alertDescription"
        ]
        remove_field => [ "device" ]
      }
      if [alertDescription] {
        ruby {
          init => "require 'base64'"
          code => "event.set('AlertDescription', Base64.decode64(event.get('alertDescription')[0]))"
          remove_field => [ "alertDescription" ]
        }
      }
    }
    if [task] {
      xml {
        source => "task"
        target => "Task"
        xpath => [
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Task']/@value", "queueMsg"
        ]
        remove_field => [ "task" ]
      }
      if [queueMsg] {
        ruby {
          init => "require 'base64'"
          code => "event.set('QueueMessage', Base64.decode64(event.get('queueMsg')[0]))"
          remove_field => [ "queueMsg" ]
        }
      }
    }
    if [tasks] {
      xml {
        source => "tasks"
        target => "Tasks"
        xpath => [
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Filters']/@value", "filters",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='QueueName']/@value", "queueName",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Count']/@value", "count",
          "/ParticipantObjectIdentification/ParticipantObjectDetail[@type='Failed']/@value", "failed"
        ]
        remove_field => [ "tasks" ]
      }
      if [filters] {
        ruby {
          init => "require 'base64'"
          code => "event.set('Filters', Base64.decode64(event.get('filters')[0]))"
          remove_field => [ "filters" ]
        }
      }
      if [queueName] {
        ruby {
          init => "require 'base64'"
          code => "event.set('QueueName', Base64.decode64(event.get('queueName')[0]))"
          remove_field => [ "queueName" ]
        }
      }
      if [count] {
        ruby {
          init => "require 'base64'"
          code => "event.set('Count', Base64.decode64(event.get('count')[0]))"
          remove_field => [ "count" ]
        }
      }
      if [failed] {
        ruby {
          init => "require 'base64'"
          code => "event.set('Failed', Base64.decode64(event.get('failed')[0]))"
          remove_field => [ "failed" ]
        }
      }
    }
    if [rest] {
      xml {
          source => "rest"
          target => "REST"
          xpath => [
            "/ParticipantObjectIdentification/ParticipantObjectQuery", "restParticipantObjectQuery"
          ]
          remove_field => [ "rest" ]
        }
        if [restParticipantObjectQuery] {
          ruby {
          init => "require 'base64'"
          code => "event.set('RESTParticipantObjectQuery', Base64.decode64(event.get('restParticipantObjectQuery')[0]))"
          remove_field => [ "restParticipantObjectQuery" ]
        }
      }
    }
    if [cfind] {
      xml {
        source => "cfind"
        target => "CFind"
        xpath => [
          "/ParticipantObjectIdentification/ParticipantObjectQuery", "cfindParticipantObjectQuery"
        ]
        remove_field => [ "cfind" ]
      }
      if [cfindParticipantObjectQuery] {
        ruby {
          init => "require 'base64'"
          code => "event.set('CFindParticipantObjectQuery', Base64.decode64(event.get('cfindParticipantObjectQuery')[0]))"
          remove_field => [ "cfindParticipantObjectQuery" ]
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
    index => "${ELASTICSEARCH_INDEX}"
    manage_template => "${MANAGE_TEMPLATE}"
  }
}
